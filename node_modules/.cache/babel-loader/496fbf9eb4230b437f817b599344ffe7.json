{"ast":null,"code":"var _jsxFileName = \"/Users/phw/study/nomadcoder/typescript/src/Circle.tsx\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\nheight: 100px;\nwidth: 100px;\nbackground-color: ${props => props.bgColor};\nborder-radius: 100px;\ncolor: #888;\nborder : 5px solid ${props => props.borderColor};\n`; //interface로 속성을 지정해줬다면 해당 컴포넌트에 지정한 속성을 넣어줘야 리턴이 되고 화면에 나온다.\n//왜냐하면 하나의 객체이기 때문에 객체에 무엇이 들어가야하는지 기초셋팅이 있어야한다. 만약 이것이 없다면 아무것도없이 이름만 지어준것이기\n//때문이다. ====css에서는 props가 옵션인 상태가 아니고 circleprops에서는 옵션이기 때문이다.\n\n_c = Container;\n\n//?:를 붙여주면 있어도 되고 없어도 된다. :만 있으면 무조건 속성을 지정해줘야 한다.\n//text는 노멀한 ES6자바스크립트 문구이다.\nconst Circle = _ref => {\n  let {\n    bgColor,\n    borderColor,\n    text = \"텍스트 없음\"\n  } = _ref;\n  // const [counter,setCounter] = useState(1);\n  // const [value,setValue] = useState<string|number>();\n  //두번째 줄은 타입을 두가지를 사용할수 있도록 만드는 방법, 첫번째: 예측하여 타입을 지정해준다.\n  return /*#__PURE__*/_jsxDEV(Container, {\n    bgColor: bgColor,\n    borderColor: borderColor !== null && borderColor !== void 0 ? borderColor : \"blue\",\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}; //CircleProps의 테두리는 선택이지만 ContainerProps의 테두리는 무조건이라서 App.tsx에서 하나의 Circle에만 테두리값을 준다면 오류가 난다.\n//그래서 초기값을 설정해준다. 초기값을 설정하는 방법은 ?? 만 쓰면 된다.\n\n\n_c2 = Circle;\nexport default Circle;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Circle\");","map":{"version":3,"sources":["/Users/phw/study/nomadcoder/typescript/src/Circle.tsx"],"names":["styled","Container","div","props","bgColor","borderColor","Circle","text"],"mappings":";AACA,OAAOA,MAAP,MAAmB,mBAAnB;;AAOA,MAAMC,SAAS,GAAGD,MAAM,CAACE,GAAoB;AAC7C;AACA;AACA,oBAAqBC,KAAD,IAAWA,KAAK,CAACC,OAAQ;AAC7C;AACA;AACA,qBAAsBD,KAAD,IAAWA,KAAK,CAACE,WAAY;AAClD,CAPA,C,CAQA;AACA;AACA;;KAVMJ,S;;AAiBN;AACA;AACA,MAAMK,MAAM,GAAG,QAAuD;AAAA,MAAtD;AAACF,IAAAA,OAAD;AAAUC,IAAAA,WAAV;AAAuBE,IAAAA,IAAI,GAAE;AAA7B,GAAsD;AAEpE;AACA;AACA;AAEA,sBACE,QAAC,SAAD;AAAW,IAAA,OAAO,EAAIH,OAAtB;AAA+B,IAAA,WAAW,EAAIC,WAAJ,aAAIA,WAAJ,cAAIA,WAAJ,GAAmB,MAA7D;AAAA,cACGE;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAZD,C,CAaA;AACA;;;MAdMD,M;AAeN,eAAeA,MAAf","sourcesContent":["import { useState } from \"react\";\nimport styled from \"styled-components\";\n\ninterface ContainerProps {\n  bgColor:string;\n  borderColor:string;\n}\n\nconst Container = styled.div<ContainerProps>`\nheight: 100px;\nwidth: 100px;\nbackground-color: ${(props) => props.bgColor};\nborder-radius: 100px;\ncolor: #888;\nborder : 5px solid ${(props) => props.borderColor};\n`;\n//interface로 속성을 지정해줬다면 해당 컴포넌트에 지정한 속성을 넣어줘야 리턴이 되고 화면에 나온다.\n//왜냐하면 하나의 객체이기 때문에 객체에 무엇이 들어가야하는지 기초셋팅이 있어야한다. 만약 이것이 없다면 아무것도없이 이름만 지어준것이기\n//때문이다. ====css에서는 props가 옵션인 상태가 아니고 circleprops에서는 옵션이기 때문이다.\n\ninterface CircleProps {\n  bgColor:string;\n  borderColor?:string;\n  text?: string;\n}\n//?:를 붙여주면 있어도 되고 없어도 된다. :만 있으면 무조건 속성을 지정해줘야 한다.\n//text는 노멀한 ES6자바스크립트 문구이다.\nconst Circle = ({bgColor, borderColor, text =\"텍스트 없음\"}:CircleProps) =>{\n\n  // const [counter,setCounter] = useState(1);\n  // const [value,setValue] = useState<string|number>();\n  //두번째 줄은 타입을 두가지를 사용할수 있도록 만드는 방법, 첫번째: 예측하여 타입을 지정해준다.\n  \n  return(\n    <Container bgColor = {bgColor} borderColor = {borderColor ?? \"blue\"}>\n      {text}\n    </Container>\n\n  )\n} \n//CircleProps의 테두리는 선택이지만 ContainerProps의 테두리는 무조건이라서 App.tsx에서 하나의 Circle에만 테두리값을 준다면 오류가 난다.\n//그래서 초기값을 설정해준다. 초기값을 설정하는 방법은 ?? 만 쓰면 된다.\nexport default Circle;"]},"metadata":{},"sourceType":"module"}